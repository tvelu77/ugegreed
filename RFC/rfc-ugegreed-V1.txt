RFC rédigée par Axel BELIN et Thomas VELU pour un cours de programmation réseau en JAVA en INFO2 à l'ESIPE par M. Arnaud CARAYOL.


---------------------------------------------------- SOMMAIRE --------------------------------------------------------------------------

1. Introduction  

    1.1. Objectif  
	1.2. Terminologie / Glossaire  

2. Fonctionnement général

3. Fonctionnement du protocole avec des exemples

    3.1 Connexion  
	3.2 Déconnexion  
        3.2.1 Déconnexion d'un noeud sans fils  
		3.2.2 Déconnexion d'un noeud parent (hors ROOT)  
		3.2.3 Déconnexion du root (pas encore géré dans cette version du protocole)  
	3.3 Envoi d'un calcul  
	3.4 Exemple d'utilisation un peu plus complexe  
	
4. Composition des différents types de paquets  

    4.1 CONNECTOR  
	4.2 READYNATOR  
	4.3 ACK READYNATOR  
	4.4 CALCULATOR  
	4.5 RESULTATOR  
	4.6 DECONNECTOR  
        4.6.1 DECONNECTOR TO CHILDREN  
		4.6.2 DECONNECTOR TO PARENT  
		4.6.3 TERMINATOR (pas encore géré dans cette version du protocole)  

----------------------------------------------------------------------------------------------------------------------------------------



1. Introduction

    1.1. Objectif

        UGEGreed est une application permettant de mettre en place un système de calcul distribué au dessus du protocole TCP.
        L'application permet à l'utilisateur de distribuer un calcul à d'autres machines connectées. Ces calculs sont donnés par un fichier JAR.
        Le but de l'application est d'accélérer le calcul en utilisant la puissance de plusieurs machines.
        La RFC va présenter le fonctionnement général de l'application, puis, les détails avec des exemples de chaque cas, et finalement, définir le contenu des types de paquets utilisés dans l'application.
    
    1.2. Terminologie

        Dans cette RFC, plusieurs termes vont être utilisés. 
        Cette section permet de donner une définitionde chaque terme.

        application
            L'application (UGEGreed) est un programme développé en JAVA par Axel BELIN et Thomas VELU basé sur le protocole TCP.
        
        arbre
            Un réseau de machines connectées entre elles.
        
        fichier JAR
            Un fichier contenant du code JAVA compilé.

        fils
            Une machine qui s'est connecté au port d'une autre machine.
            Dans un arbre :
                    A       B et C sont les fils de A.
                   / \
                  B   C
        
        machine
            Instance de l'application démarrée sur une adresse IP et un port d'une machine.
        
        noeud
            Représentation symbolique d'une machine dans l'arbre.
        
        op/ops (operators)
            Il s'agit du type d'un paquet. Chaque type de paquet a son OPS.
            Par exemple : L'OPS d'un paquet CONNECTOR est 0.
        
        paquet
            Données envoyées à travers le protocole TCP contenant des informations (calculs, états, divers, etc.).
        
        parent
            Une machine qui reçoit la connexion d'une autre machine sur son port.
            Dans un arbre :
                    A       A est le parent de B et C.
                   / \
                  B   C
        
        poids
            Le nombre de machine connecté à un noeud (Nous comptons le noeud aussi).

        réseau
            Système regroupant les machines qui ont lancés avec succès l'application et qui sont connectées entre-elles en TCP.
            La connexion à une machine du réseau doit se faire sur un port réservé compris entre 6666 et 9999.
                  
        root
            La première machine du réseau.
        
        socket
            Le couple adresse IPv(4/6) / port.
        
        sous-arbre
            Dans un arbre :
                    A       Les noeuds B, D et E composent un sous-arbre, il y a un père et au moins un fils.
                   / \
                  B   C
                 / \
                D   E

        système de calcul distribué
            Processus permettant de faire un calcul sur plusieurs machines.
        
2. Fonctionnement général

    L'utilisateur envoie un JAR et une gamme de valeurs.
    La gamme de valeurs sera distribué récursivement à toutes les machines disponibles.
    Pour cela, l'application qui a envoyé le calcul demandera une réponse aux autres applications pour savoir si elles sont prêtes à recevoir.
    Dès l'envoie des calculs, chaque application fera le calcul qui lui a été donné puis enverra un paquet contenant la réponse à celui qui a donné le calcul.
    Dans les cas de déconnexion :
        - Une application non ROOT : Elle ne pourra se déconnecter que si elle a fini ses calculs.
        - Une application ROOT (Non géré dans cette version du protocole) : Tous les calculs doivent être terminés avant déconnexion, pour cela, lors du souhait de déconnexion, le ROOT va envoyer un paquet pour avertir toutes les applications qu'elles doivent refuser toutes nouvelles opérations.


    Les machines forment un arbre de ce type par exemple :
        A
       / \
      B   C
     / \   \
    D   E   F

3. Fonctionnement du protocole avec des exemples

    Les sous-parties 3.1 à 3.3 donnent des explications détaillées avec des exemples d'utilisation simples.
    La sous partie 3.4 donne un exemple d'utilisation un peu plus complexe.
    Se réferrer à la partie 4 pour des informations plus précises sur la composition des différents paquets évoqués dans cette partie.

    3.1 Connexion

        Nota Bene : Pour ajouter une machine à un réseau existant, il faut établir une connexion TCP vers une autre machine du réseau sur son adresse IP et sur un port réservé compris entre 6666 et 9999.
        Si il s'agit de la première machine du réseau (ROOT), il n'y pas besoin de la connecter à une autre machine.


        Supposons que nous ayons un arbre avec A, B et C.
        A étant le root et B, C ses fils, comme ceci :

             A
            / \
           B   C

        Initialement, A possèdera le poids 3 car il y a 3 machines connectées au réseau.
        Maintenant, une machine D veut se connecter à B !

             A
            / \
           B   C
           |
           D
        
        Pour cela D va envoyer un paquet CONNECTOR à B :

            byte
            +---+
            | 0 |
            +---+
        
        Et B va incrémenter son poids de 1 et renvoyer le paquet à A :

            byte
            +---+
            | 0 |
            +---+
        
        A va faire de même en incrémentant son poids de 1. Cependant, A étant root, il ne peut pas envoyer le même paquet à un parent.

    
    3.2 Déconnexion

        Le déconnexion présente plusieurs cas.

        3.2.1 Déconnexion d'un noeud sans fils

            Le cas simple, nous avons ce réseau :

                 A
                / \
               B   C
               |
               D

            Si la machine D veut se déconnecter, elle termine ses calculs puis envoie un paquet DECONNECTOR à B.
            Comme ceci :

            D -> B :

                byte
                +---+
                | 6 |
                +---+

                B va recevoir ce paquet puis va décrémenter de 1 son poids puis va retransmettre le paquet à A pour prévenir d'une déconnexion d'une machine dans le réseau.
            
            B -> A :

                byte
                +---+
                | 6 |
                +---+

                A va recevoir ce paquet puis décrémenter son poids.

            Après ces opérations, l'arbre sera représenté de cette façon :
        
                 A
                / \
               B   C
        
        3.2.2 Déconnexion d'un noeud parent (hors root)

            Dans ce cas, la machine B veut se déconnecter :

             A
            / \
           B   C
           |
           D

           La machine B pourrait se déconnecter mais la machine D verrait alors un arrêt brutal du service.
           Pour régler ça, B envoie un paquet DECONNECTOR à son fils D et au parent A.
           Ce paquet permet de dire à la machine D de se reconnecter à la machine A.
           Pour que B puisse se déconnecter du réseau, il faut d'abord que D se déconnecte de B afin de pouvoir se reconnecter à A.

           Cette procédure s'effectue en 4 étapes :

           
           Etape 1) Dans un premier temps, B envoie à D un paquet DECONNECTOR TO CHILDREN avec l'adresse de socket de A.

            B -> D :

                byte  byte         ASCII         int
                +---+-------------+------------+------------+
                | 5 | 0           | adresse A  | port de A  |
                +---+-------------+------------+------------+
                D reçoit le paquet DECONNECTOR TO CHILDREN envoyé par B.
                D va sauvegarder l'adresse et le port donnés dans la paquet (ceux de la machine A).


            Ensuite, B envoye un paquet DECONNECTOR TO PARENT à A afin de signaler à A qu'il va se déconnecter.

            B -> A :

                byte
                +---+
                | 6 |
                +---+


            Etape 2) D ayant reçu le paquet DECONNECTOR TO CHILDREN envoyé par B, il peut se déconnecter de B.
            
            D se déconnecte de B, donc il envoie un paquet DECONNECTOR TO PARENT avant de se déconnecter du réseau.

            D -> B :

                byte
                +---+
                | 6 |
                +---+

                B va pouvoir retransmettre à A le paquet DECONNECTOR TO PARENT qu'il a reçu de D :
            
            B -> A :

                byte
                +---+
                | 6 |
                +---+

                A sait que D s'est bien déconnectée, donc il décrémente son poids de 1.

            Etape 3) B n'ayant de plus de fils, il peut se déconnecter, donc il envoie un paquet DECONNECTOR TO PARENT à A.
            B -> A :

                byte
                +---+
                | 6 |
                +---+

                Ainsi, A va pouvoir décrémenter son poids de 1 car B vient de quitter le réeau.

                Maintenant que B et D sont déconnectées, le poids de A est de 2 (A, C).
            
            Etape 4) Pour finir, D doit se reconnecter à A. Pour ce faire, il envoie un paquet CONNECTOR à A.
            Cela est possible car il avait sauvegardé l'adresse de socket de A qui lui avait été transmise par B à l'étape 1.

            D -> A :

                byte
                +---+
                | 0 |
                +---+

                A reçoit le paquet et incrémente son poids de 1.
                A a maintenant un poids de 3 car D est connecté à A (A, D, C).

            
            L'arbre ressemblera à ça :
            
                 A
                / \
               D   C


        3.2.3 Déconnexion du root

            Dans l'arbre suivant :

                 A
                / \
               B   C

           La machine A est le root du réseau, ce qui signifie qu'elle ne pourra pas déconencter brusquement.
           Dans le cas où la machine A voudrait se déconnecter, il est important et nécessaire qu'il n'y ait aucun calcul en cours.

    3.3 Envoi d'un calcul

        Cette partie détaille le processus de partage du calcul. Ce dernier permet de répartir un calcul entre plusieurs machines du réseau.
        Ce processus s'effectue en 3 phases :
        1. Demande de partage du calcul entre plusieurs machines
        2. Répartition du calcul entre les machines prêtes à en effectuer une partie
        3. Agrégation du résultat

        Dans l'arbre suivant :

             A
            / \
           B   C
        
        L'utilisateur rentre dans l'application A plusieurs données : l'URL d'un jar et la gamme de valeurs (0 à 500).
        Le poids de A est 3, donc la gamme de valeurs sera divisée en trois (La division est arrondi au supérieur par défaut).
        Ici, les gammes sont [0..167], [168..332], [333..500].

        Phase 1 :

        Dans un premier temps, A va envoyer un paquet pour demander à B s'il est prêt à recevoir le calcul.
        Pour se faire, il doit définir un identifiant de demande qui sera conservé pendant toute la durée du processus de partage du calcul.

        A -> B :

        On suppose que A choisit l'identiant de demande 42.

            byte  long
            +---+------+
            | 1 | 42   |
            +---+------+
        
            Si B a au moins un fils, il peut transmettre la demande à son ou ses fils.
            Dans cet exemple, B n'a pas de fils donc il ne retransmettra pas le paquet.

        Dans tous les cas B va envoyer un ACK READYNATOR a A.
        
        B -> A :

            byte  long   int
            +---+------+----+
            | 2 | 42   | 1  |
            +---+------+----+

            Comme ici, on suppose que B est prêt, B envoie un ACK READYNATOR avec l'entier 1 car il n'a pas de fils.
            Ainsi, A sera au courant que B est prêt à recevoir le calcul et qu'il sera le seul à calculer dans le sous-arbre gauche.

            Si B n'était pas prêt, il répondrait avec ce paquet.

            byte  long   int
            +---+------+----+
            | 2 | 42   | 0  |
            +---+------+----+

            En effet, A sera au courant qu'aucune machine n'est prête à faire de calculs dans le sous-arbre gauche.

        Phase 2:

        Pour l'exemple, disons que B et C sont prêts : donc A va recevoir l'accord de B et C pour transmettre les données afin que les 2 machines puissent faire le calcul.
        A va envoyer 2 paquets CALCULATOR : Le premier sera envoyé à B et le second à C.

        Dans cet exemple, A effectue le calcul dans l'intervalle [0..167], B dans l'intervalle [168..332] et C dans l'intervalle [333..500].

        On suppose que le jar à télécharger se trouve à l'URL suivante :
            https://toto.com/jars/gigaGrosCalcul.jar
        
        L'URL sera envoyé dans le paquet encodée en UTF-8. Sa taille en octets est donc de 40 octets. cette taille doit être renseignée dans le paquet CALCULATOR.
        
        Paquet CALCULATOR A -> B (intervalle [168..332]) :

            byte   long   int                              UTF-8                                        long   long
            +---+-------+----+--------------------------------------------------------------------------+-----+-----+
            | 3 | 42    | 40 | \x68\x74\x74\x70\x73\x3A\x2F\x2F\x74\x6F\x74\x6F\x2E\x63\x6F\x6D\x2F\... | 168 | 332 |
            +---+-------+----+--------------------------------------------------------------------------+-----+-----+

            B va recevoir le paquet, télécharger le jar et effectuer l'opération entre les deux dernières valeurs envoyées.

        La même chose se passe de A vers C mais avec les deux dernières valeurs différentes.
        En effet, C devra faire sa partie du calcul dans une intervalle différente, à savoir : [333..500].

        Paquet CALCULATOR A -> C (intervalle [333..500]) :
        
            byte   long   int                              UTF-8                                        long   long
            +---+-------+----+--------------------------------------------------------------------------+-----+-----+
            | 3 | 42    | 40 | \x68\x74\x74\x70\x73\x3A\x2F\x2F\x74\x6F\x74\x6F\x2E\x63\x6F\x6D\x2F\... | 333 | 500 |
            +---+-------+----+--------------------------------------------------------------------------+-----+-----+

            Comme pour B, C va recevoir le paquet, télécharger le jar et effectuer l'opération entre les deux dernières valeurs envoyées.

        Phase 3 :

        Lors de la fin du calcul d'un noeud, le noeud va envoyer le résultat de son calcul au parent.

        On suppose que les résultats de l'opération 42 sont :
        - 100 850 249 123 dans l'intervalle [0..167]
        - 123 254 827 dans l'intervalle [168..332]
        - 1 633 654 888 777 dans l'intervalle [333..500]

        A va recevoir 123 254 827 et 1 633 654 888 777 respectivement de B et C.
        
        B et C vont envoyer à A un paquet RESULTATOR avec leurs résultats. Dans ce paquet sera aussi reprécisé l'intervalle dans laquelle a été effectuée le calcul.

        Paquet RESULTATOR B -> A (intervalle [168..332]) :

            B doit envoyer le résultat suivant encodé en UTF-8 : 123 254 827.
            Sa taille en octet est donc de 9 octets soit la taille en octets de la chaine 123254827 encodé en UTF-8.

            byte  long   long   long   long                  UTF-8
            +---+------+------+------+------+--------------------------------------+
            | 4 | 42   | 168  | 332  | 9    | \x31\x32\x33\x32\x35\x34\x38\x32\x37 |
            +---+------+------+------+------+--------------------------------------+

        Paquet RESULTATOR C -> A (intervalle [333..500]) :

            C doit envoyer le résultat suivant encodé en UTF-8 : 1 633 654 888 777.
            Sa taille en octet est donc de 13 octets soit la taille en octets de la chaine 1633654888777 encodé en UTF-8.

            byte  long   long   long   long                         UTF-8
            +---+------+------+------+------+------------------------------------------------------+
            | 4 | 42   | 333  | 500  | 13   | \x31\x36\x33\x33\x36\x35\x34\x38\x38\x38\x37\x37\x37 |
            +---+------+------+------+------+------------------------------------------------------+
        
        
        Une fois les 3 résultats en sa possession (le sien et ceux de B et C), A va les agréger et les écrire dans un fichier texte.
        Par exemple, le format du fichier pourrait être le suivant :
            [0..167] : 100_850_249_123;[168..332] : 123_254_827;[333..500] : 1_633_654_888_777
        


    3.4 Exemple d'utilisation un peu plus complexe

        Voici un autre exemple un peu plus complexe dans lequel A souhaite partager un calcul avec ses fils :

                 A
                / \
               B   C
              / \
             D   E

            Dans le cas d'un sous-arbre B, D, E, nous imaginons que B et E ne sont pas prêts à recevoir plus de charges.

            On supposera également que l'identifiant de la demande est 42.
            
            A envoie un paquet READYNATOR à B et C.
            Comme C n'a pas de fils, il n'a pas besoin d'envoyer de paquet READYNATOR. Il peut donc répondre directement à A avec le paquet ACK READYNATOR suivant :

                byte  long   int
                +---+------+----+
                | 2 | 42   | 1  |
                +---+------+----+

                C est prêt et n'a pas de fils donc 1 machine peut calculer dans le sous-arbre droit de A.
            
            En revanche, B va envoyer un paquet READYNATOR afin de demander la disponibilité de ses fils.
            D est prêt donc il envoie ce ACK READYNATOR à B :
            
                byte  long   int
                +---+------+----+
                | 2 | 42   | 1  |
                +---+------+----+

                D est prêt et n'a pas de fils donc 1 machine peut calculer dans le sous-arbre gauche de B.

            E n'étant pas disponible, il renvoie à B ce paquet ACK READYNATOR :

                byte  long   int
                +---+------+----+
                | 2 | 42   | 0  |
                +---+------+----+

                E n'est pas prêt et n'a pas de fils donc aucune machine ne peut calculer dans le sous-arbre droit de B.
            
            
            Une fois les paquets de D et E reçus, B va envoyer à A ce paquet ACK READYNATOR :

                byte  long   int
                +---+------+----+
                | 2 | 42   | 1  |
                +---+------+----+

                Comme il a reçu 1 et 0 de ses fils, il fait la somme et envoie le résultat à A.
                Ainsi, 1 machine peut calculer dans le sous-arbre gauche de A.
                

            A sait que en tout il y a 3 machines disponibles mais il ne sait pas lesquelles exactement.

            Ainsi, seules les machines A, C et D vont effectuer une partie du calcul.
            L'idée est que A va effectuer le calcul sur le premier tiers de l'intervalle, D sur le second et C sur le dernier.

            A va couper la gamme de valeurs en trois parties et envoyer 2 paquets CALCULATOR à B et C avec une intervalle de calcul différente.

            Quand C reçoit son paquet CALCULATOR, comme il n'a pas de fils, il peut directement faire le calcul dans l'intervalle donnée.
            
            A l'inverse, quand B va recevoir son paquet CALCULATOR, il va envoyer un paquet READYNATOR à ses fils pour savoir lesquels sont prêts à faire une partie du calcul.
            En fait, cela revient à dire que récursivement B effectue une nouvelle demande de partage de calcul à ses fils. C'est pourquoi il doit définir un nouvel identifiant de demande.
            On va supposer que ce nouvel identifiant de demande est 43. Ce dernier sera mis dans les paquets READYNATOR que B va envoyer à D et à E.
            On suppose également que rien a changé entre temps et que D est toujours prêt à faire un calcul et que E ne l'est toujours pas.

            D va envoyer qu'il est prêt dans ce ACK READYNATOR :
                byte  long   int
                +---+------+----+
                | 2 | 43   | 1  |
                +---+------+----+

            E n'étant toujours pas disponible, il renvoie à B ce paquet ACK READYNATOR :

                byte  long   int
                +---+------+----+
                | 2 | 43   | 0  |
                +---+------+----+

            Notez que l'identifiant de la demande est maintenant 43.
            
            Etant donné qu'il n'est pas prêt, et que E non plus, B va diviser la gamme de valeurs par 1 et envoyer un paquet CALCULATOR à D.
            En fait, dans cet exemple, cela revient à dire que B va envoyer à D tout le calul que A lui avait demandé de faire.

            Une fois que D a terminé le calcul, il envoie un paquet RESULTATOR à B avec son résulat.
            Ce paquet aura cette forme :

                byte  long              long                           long                      long               UTF-8
                +---+------+-------------------------------+-----------------------------+--------------------+-------------+
                | 4 | 43   | début intervalle donnée par B | fin intervalle donnée par B | taille result de D | result de D |
                +---+------+-------------------------------+-----------------------------+--------------------+-------------+
            
            Comme D est la seule machine qui a calculé un résultat dans le sous-arbre de B, ce dernier a juste à transmettre le résultat de D à A dans un nouveau paquet RESULTATOR.
            Attention : B doit remettre l'identifiant 42 dans le paquet RESULTATOR qu'il envoie à A car il s'agit de la réponse de la demande qui avait été faite par A avec l'identifiant 42. En effet, la demande 43 correspond à la demande faite par B à ses fils que A ne connait même pas.

            Ce nouveau paquet RESULTATOR aura cette forme :
            
                byte  long              long                           long                      long               UTF-8
                +---+------+-------------------------------+-----------------------------+--------------------+-------------+
                | 4 | 42   | début intervalle donnée par A | fin intervalle donnée par A | taille result de D | result de D |
                +---+------+-------------------------------+-----------------------------+--------------------+-------------+

            Une fois que A a reçu les résultats de ses 2 fils B et C, il les agrège et écrit le résultat final dans un fichier texte.
            
            Les demandes 42 et 43 sont terminées.



4. Composition des différents types de paquets

    L'application comporte plusieurs types de paquets avec un but spécifique pour l'application et le réseau :

        4.1 CONNECTOR

            Un paquet permettant d'avertir les machines du réseau qu'une machine s'est connectée au réseau.
            Lorsqu'une machine se connecte à une autre, elle lui envoie un paquet CONNECTOR. Cette machine va le transmettre à son parent.
            Récursivement, chaque machine qui reçoit un paquet CONNECTOR va le retransmettre à son parent jusqu'à arriver à ROOT.

            Émetteur : Une machine qui vient de se connecter en TCP à une autre machine du réseau sur son adresse IP et sur un port réservé compris entre 6666 et 9999.

            Récepteur : La machine à laquelle s'est connectée la nouvelle machine du réseau. Cette machine devient son parent.

            OPS = 0

            byte
            +---+
            | 0 |
            +---+

            Nota Bene : Pour des raisons de concurrence, il ne faut surtout rien mettre de plus dans ce paquet.

            TAILLE MAX = 1 octet

        4.2 READYNATOR

            Un paquet demandant si le noeud questionné est prêt à recevoir un calcul.

            Émetteur : Un noeud souhaitant partager un calcul.

            Récepteur : Le fils auquel le noeud souhaite soumettre le calcul.

            OPS = 1

            byte    long
            +---+-------------+
            | 1 | idOperation |
            +---+-------------+

            Où :
            - idOperation est un long correspondant à l'identifiant de la demande. Cet identifiant sera conservé dans tous les paquets en lien avec la demande, à savoir : ACK READYNATOR, CALCULATOR et RESULTATOR.

            TAILLE MAX = 1 octet + 8 octets = 9 octets

        4.3 ACK READYNATOR

            Paquet envoyé en réponse d'un READYNATOR.
            Ce paquet contient un entier qui correspond au nombre de machines qui peuvent effectuer une partie du calcul.

            Une machine peut refuser un calcul et peut décider de le retransmettre à son ou ses fils.
            Réciproquement, les fils peuvent décider d'effectuer ou non le calcul et de le rentransmettre à leurs fils.

            Émetteur : Un noeud qui reçoit un READYNATOR

            Récepteur : Le noeud qui avait envoyé le READYNATOR.

            Le récepteur peut faire la somme de tous les paquets ACK READYNATOR qu'il a reçu afin de connaitre le nombre de machines qui veulent se partager le calcul.
            Si la somme vaut 0, alors cela siginifie que toutes les machines requêtées ont refusé le calcul.
            Dans ce cas, le récepteur n'enverra pas de paquet CALCULATOR jusqu'à la prochaine demande de calul par un utilisateur.


            Nota Bene : On admet qu'une machine qui s'engage doit effectuer le calul qui lui sera transmis dans le prochain paquet CALCULATOR.

            Par exemple, si un paquet ACK READYNATOR contient 3, alors le récepeteur sait que 3 machines s'engagent à effectuer le calcul qu'il va envoyer dans le prochain paquet CALCULATOR.

            OPS = 2

            byte    long                int
            +---+-------------+-----------------------+
            | 2 | idOperation | numberOfMachinesReady |
            +---+-------------+-----------------------+

            Où :
            - idOperation est un long qui correspond au même identifiant qui a été envoyé dans le paquet READYNATOR.
            - numberOfMachinesReady est un int qui correspond au nombre de machines prêtes a effectuer une partie du calcul.

            TAILLE MAX = 1 octet + 8 octets + 4 octets = 13 octets

        4.4 CALCULATOR

            Un paquet contenant le calcul à envoyer à un noeud. Un calcul peut être réparti sur plusieurs machines, c'est pourquoi le paquet contient un intervalle de valeur dans laquelle le calcul doit être effectué.

            Chaque opération est identifiée avec un identifiant. Cet identifiant est le même que celui envoyé dans le paquet READYNATOR.

            Émetteur : Une machine du réseau souhaitant déléguer un calcul dans une certaine plage de valeurs.

            Récepteur : Le fils auquel la machine souhaite soumettre le calcul.
            
            OPS = 3

            byte   long          int           UTF-8      long         long
            +---+-------------+-------------+----------+------------+----------+
            | 3 | idOperation | jarLinkSize | jarLink  | startRange | endRange |
            +---+-------------+-------------+----------+------------+----------+

            Où :
                - idOperation est l'identifiant qui a été défini dans le paquet READYNATOR envoyé auparavant.
                - jarLinkSize est la taille en nombre d'octets du lien du jar à télecharger
                - jarLink, le lien du Jar à télécharger en UTF-8.
                - startRange est le premier nombre de l'intervalle dans laquelle réaliser le calcul. Autrement dit, il s'agit de la borne inférieure de l'intervalle. 
                - endRange est la borne supérieure de l'intervalle exclue. 
            
            Nota Bene : le calcul doit être réalisé dans l'intervalle startRange inclu et endRange exclu.

            TAILLE MAX = 1 octet + 8 octets + 4 octets + 2048 octets + 8 octets + 8 octets = 2077 octets


        4.5 RESULTATOR

            Paquet qui contient le résultat d'une opération dans une intervalle donnée.

            La paquet contient l'identifiant de l'opération, son résultat, ainsi que l'intervalle dans laquelle le calcul a été effectué.
            
            Tous les paquets de result d'une opération doivent être retransmis à la machine qui est à l'origine du premier paquet de CALCULATOR.
            Par exemple, si une machine A envoie 2 paquets CALCULATOR à 2 machines B et C, alors B et C enverrons toutes deux un paquet RESULTATOR avec leur résultats respectifs.
            
            Émetteur : Une machine du réseau ayant terminé un calcul que lui avait donné son parent.

            Récepteur : Le parent à l'origine de la demande du calcul.
            
            OPS = 4

            byte   long         long         long        long        UTF-8
            +---+-------------+------------+----------+------------+--------+
            | 4 | idOperation | startRange | endRange | resultSize | result |
            +---+-------------+------------+----------+------------+--------+

            Nota Bene : Pour que le protocole reste suffisamment générique, le résultat d'un calcul est représenté sous la forme d'une chaine de caractères encodée en UTF-8. Par conséquent, le paquet RESULTATOR n'a pas de taille maximum.

            Où
                - idOperation est un long qui correspond à l'identiant qui avait été envoyé dans le paquet CALCULATOR.
                - startRange est le premier nombre de l'intervalle dans laquelle réaliser le calcul. Autrement dit, il s'agit de la borne inférieure de l'intervalle.
                - endRange est la borne supérieure de l'intervalle exclue.
                - resultSize est la taille du résultat de l'opération en nombre d'octets.
                - result est une chainde caractères représentant le résultat de l'opération encodé en UTF-8. 

            TAILLE MAX : INCONNUE car result peut être de n'importe quelle taille.

        4.6 DECONNECTOR

            Paquet émis par une machine souhaitant se déconnecter du réseau dès que tous ses calculs sont terminés.
            Ce paquet peut être émis par n'importe quelle machine du réseau à l'exception de ROOT.
            Ce paquet est un paquet d'information permettant aux machines de décrémenter leur poids.

            Lorsqu'une machine souhaite se déconnecter, elle termine tous ses calcul et envoie son résultat avant d'envoyer un paquet DECONNECTOR à son parent et à tous ses enfants.

            Nota Bene : Une machine ne peut pas se déconnecter du réseau tant qu'elle n'a pas terminé tous ses calculs et envoyé le résultat.

            Ce paquet contient l'adresse de socket du parent de la machine émettrice qui souhaite se déconnecter. Ainsi, lorsque les fils de la machine émettrice recevront un paquet DECONNECTOR, ils seront qu'ils devront se reconnecter à la machine parent.

            Émetteur : Une machine du réseau souhaitant se déconnecter. Cette machine ne peut pas être ROOT.

            Récepteur : Le parent et tous les fils de la machine
            

            4.6.1 DECONNECTOR TO CHILDREN :

                Lorsqu'une machine (non Root) ayant au moins un fils souhaite se déconnecter du réseau, elle envoie ce paquet à tous ses fils.
                Ce paquet permet de transmettre l'adresse de socket du parent de la machine souhaitant se déconnecter à tous ses fils.
                Ainsi, les fils pourront se reconnecter au parent après s'être déconnectés de la machine souhaitant se déconnecter du réseau.
                Emetteur : une machine qui souhaite se déconnecter du réseau et qui a un ou plusieurs fils

                Récepteur : Les fils de la machine souhaitant se déconnecter

                Nota bene : Ce paquet ne doit pas être retransmis récursivement par les fils l'ayant reçu.

                OPS = 5

                byte  byte         ASCII         int
                +---+----------+------------+------------+
                | 5 | typeAddr | parentAddr | parentPort |
                +---+----------+------------+------------+

                Où :
                    - typeAddr est le type de l'addresse IP : 0 pour une IPv4 et 1 pour une IPv6
                    - parentAddr est l'adresse IP du parent de la machine souhaitant se déconnecter encodée en ASCII
                    - parentPort est le port de connexion TCP du parent de la machine souhaitant se déconnecter
                    
                TAILLE MAX = 1 octet + 1 octet + 16 octets + 4 octets = 22 octets

            4.6.2 DECONNECTOR TO PARENT :

                Lorsqu'une machine (non ROOT) souhaite se déconnecter du réseau, elle envoie ce paquet à son parent.
                Ainsi, le parent sera averti de la déconnexion d'un de ses fils et pourra décrémenter son poids de 1 avant de retransmettre récursivement le paquet à son parent qui fera pareil à son tour.

                Emetteur : une machine qui souhaite se déconnecter du réseau

                Récepteur : Le parent de la machine souhaitant se déconnecter

                Nota bene : Ce paquet doit être retransmis récursivement à tous les parents de la machine jusqu'à ROOT inclu.

                OPS = 6

                byte
                +---+
                | 6 |
                +---+

            TAILLE MAX = 1 octet



            4.6.3 TERMINATOR (pas encore géré dans cette version du protocole)

                Paquet permettant au ROOT de se déconnecter du réseau après avoir demandé à toutes les autres machines du réseau d'arréter leurs calculs en cours et de se déconnecter.
                Tous les calculs doivent être terminés avant déconnexion, pour cela, lors du souhait de déconnexion, le ROOT va envoyer un paquet pour avertir toutes les applications qu'elles doivent refuser toutes nouvelles opérations.
